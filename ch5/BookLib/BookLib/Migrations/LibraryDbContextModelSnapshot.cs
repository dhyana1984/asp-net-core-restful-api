// <auto-generated />
using System;
using BookLib.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookLib.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookLib.Entities.Author", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 245, 181, 213, 114, 8, 48, 183, 73, 176, 214, 204, 51, 127, 26, 51, 48 },
                            BirthDate = new DateTimeOffset(new DateTime(1960, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            BirthPlace = "Beijing",
                            Email = "author1@xxx.com",
                            Name = "Author 1"
                        },
                        new
                        {
                            Id = new byte[] { 142, 164, 4, 125, 78, 190, 142, 70, 140, 226, 58, 192, 160, 199, 149, 73 },
                            BirthDate = new DateTimeOffset(new DateTime(1976, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            BirthPlace = "Hubei",
                            Email = "author2@xxx.com",
                            Name = "Author 2"
                        },
                        new
                        {
                            Id = new byte[] { 62, 177, 6, 132, 147, 167, 18, 75, 132, 203, 127, 226, 166, 148, 185, 170 },
                            BirthDate = new DateTimeOffset(new DateTime(1973, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            BirthPlace = "Hubei",
                            Email = "author3@xxx.com",
                            Name = "Author 3"
                        },
                        new
                        {
                            Id = new byte[] { 189, 106, 85, 116, 108, 26, 32, 77, 168, 167, 39, 29, 212, 57, 59, 46 },
                            BirthDate = new DateTimeOffset(new DateTime(1978, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            BirthPlace = "Shandong",
                            Email = "author4@xxx.com",
                            Name = "Author 4"
                        },
                        new
                        {
                            Id = new byte[] { 87, 219, 41, 16, 92, 193, 12, 76, 128, 160, 200, 17, 183, 153, 92, 180 },
                            BirthDate = new DateTimeOffset(new DateTime(1973, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            BirthPlace = "Beijing",
                            Email = "author5@xxx.com",
                            Name = "Author 5"
                        },
                        new
                        {
                            Id = new byte[] { 246, 140, 151, 15, 109, 223, 169, 71, 142, 242, 210, 114, 60, 194, 156, 200 },
                            BirthDate = new DateTimeOffset(new DateTime(1981, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            BirthPlace = "Beijing",
                            Email = "author6@xxx.com",
                            Name = "Author 6"
                        },
                        new
                        {
                            Id = new byte[] { 118, 57, 238, 16, 114, 214, 17, 68, 174, 28, 50, 103, 186, 169, 64, 235 },
                            BirthDate = new DateTimeOffset(new DateTime(1954, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            BirthPlace = "Shandong",
                            Email = "author7@xxx.com",
                            Name = "Author 7"
                        },
                        new
                        {
                            Id = new byte[] { 156, 167, 51, 38, 74, 159, 213, 72, 174, 90, 112, 148, 95, 184, 88, 60 },
                            BirthDate = new DateTimeOffset(new DateTime(1981, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            BirthPlace = "Shandong",
                            Email = "author8@xxx.com",
                            Name = "Author 8"
                        });
                });

            modelBuilder.Entity("BookLib.Entities.Book", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("AuthorId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new byte[] { 169, 189, 142, 125, 52, 38, 15, 76, 148, 105, 6, 149, 214, 19, 33, 83 },
                            AuthorId = new byte[] { 245, 181, 213, 114, 8, 48, 183, 73, 176, 214, 204, 51, 127, 26, 51, 48 },
                            Description = "Description of Book 1",
                            Pages = 281,
                            Title = "Book 1"
                        },
                        new
                        {
                            Id = new byte[] { 151, 118, 212, 30, 125, 170, 194, 72, 170, 57, 48, 93, 14, 19, 179, 170 },
                            AuthorId = new byte[] { 245, 181, 213, 114, 8, 48, 183, 73, 176, 214, 204, 51, 127, 26, 51, 48 },
                            Description = "Description of Book 2",
                            Pages = 370,
                            Title = "Book 2"
                        },
                        new
                        {
                            Id = new byte[] { 82, 200, 130, 95, 93, 55, 38, 73, 163, 183, 132, 182, 63, 193, 191, 174 },
                            AuthorId = new byte[] { 142, 164, 4, 125, 78, 190, 142, 70, 140, 226, 58, 192, 160, 199, 149, 73 },
                            Description = "Description of Book 3",
                            Pages = 229,
                            Title = "Book 3"
                        },
                        new
                        {
                            Id = new byte[] { 32, 91, 138, 65, 11, 70, 4, 70, 190, 23, 43, 8, 9, 225, 154, 205 },
                            AuthorId = new byte[] { 142, 164, 4, 125, 78, 190, 142, 70, 140, 226, 58, 192, 160, 199, 149, 73 },
                            Description = "Description of Book 4",
                            Pages = 440,
                            Title = "Book 4"
                        });
                });

            modelBuilder.Entity("BookLib.Entities.Book", b =>
                {
                    b.HasOne("BookLib.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
